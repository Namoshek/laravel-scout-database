name: 'Test PostgreSQL'

on:
  workflow_call:
    inputs:
      php-version:
        description: 'The PHP version to build against'
        type: string
        required: true

jobs:
  test_pgsql:
    name: 'Test PostgreSQL on PHP ${{ inputs.php-version }}'
    runs-on: ubuntu-latest
    services:
      sqlsrv:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: 'scoutdb'
          POSTGRES_USER: 'scoutdb'
          POSTGRES_PASSWORD: '${{ secrets.TESTS_PGSQL_DB_SECRET }}'
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -d scoutdb"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 20
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ inputs.php-version }}
          coverage: pcov

      - name: Setup problem matchers for PHP
        run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"

      - name: Setup problem matchers for PHPUnit
        run: echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install composer dependencies
        run: composer install --prefer-dist

      - name: Run phpunit tests
        run: composer test
        env:
          DB_CONNECTION: 'pgsql'
          DB_PGSQL_DATABASE: 'scoutdb'
          DB_PGSQL_USERNAME: 'scoutdb'
          DB_PGSQL_PASSWORD: ${{ secrets.TESTS_PGSQL_DB_SECRET }}
